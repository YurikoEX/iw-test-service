
import idHelper = require('../helpers/idHelper');

import ICommEmit = require('../../interfaces/eventing/ICommEmit');
import IComm = require('../../interfaces/eventing/IComm');
import ICommEventData = require('../../interfaces/eventing/ICommEventData');
import ICommEvent = require('../../interfaces/eventing/ICommEvent');
import CommEvent = require('./CommEvent');
import IAm = require('../../interfaces/whoIAm/IAm');

import IInterceptor = require('../../interfaces/eventing/IInterceptor');

class Interceptor implements IInterceptor {
    private me: IAm;
    private comm: IComm;
    private event: ICommEvent;

    constructor(comm: IComm, event: ICommEventData|string) {
        this.comm = comm;
        this.event = new CommEvent(event);
        this.me = {
            id: idHelper.newId(),
            name: this.event.getText()
        };
    }

    public tell(
        interceptor: (
            emit: ICommEmit,
            next: () => void
        ) => void
    ): IComm {
        return this.comm;
    }

    public getEvent(): ICommEvent {
        return this.event;
    }

    public getComm(): IComm {
        return this.comm;
    }

    who(callback: (e: Error, p1: IAm) => void): IAm {
        return undefined;
    }
}

export = Interceptor;
