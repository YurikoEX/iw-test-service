
///<reference path='./typings/master.d.ts' />

declare module 'ironworks/interfaces/whoIAm/IWhoQuery' {
	interface IWhoQuery {
	    names?: string[];
	    ids?: string[];
	    op?: string;
	}
	export = IWhoQuery;

}
declare module 'ironworks/interfaces/whoIAm/IAm' {
	interface IAm {
	    id: string;
	    name: string;
	}
	export = IAm;

}
declare module 'ironworks/interfaces/whoIAm/IWho' {
	import IAm = require('ironworks/interfaces/whoIAm/IAm');
	interface IWho {
	    who(callback?: (e: Error, me: IAm) => void): IAm;
	}
	export = IWho;

}
declare module 'ironworks/interfaces/eventing/IEvent' {
	interface IEvent {
	    name: string;
	}
	export = IEvent;

}
declare module 'ironworks/interfaces/eventing/IEmit' {
	import IEvent = require('ironworks/interfaces/eventing/IEvent');
	import IAm = require('ironworks/interfaces/whoIAm/IAm');
	interface IEmit extends IEvent {
	    id?: string;
	    emitter?: IAm;
	}
	export = IEmit;

}
declare module 'ironworks/interfaces/eventing/IEventer' {
	import IEvent = require('ironworks/interfaces/eventing/IEvent');
	import IEmit = require('ironworks/interfaces/eventing/IEmit');
	interface IEventer {
	    tell(event: IEmit | string): boolean;
	    inform<infoType>(event: IEmit | string, info: infoType): boolean;
	    confirm(event: IEmit | string, callback: (e: Error) => void): boolean;
	    ask<answerType>(event: IEmit | string, callback: (e: Error, answer?: answerType) => void): boolean;
	    request<requestType, responseType>(event: IEmit | string, request: requestType, callback: (e: Error, response?: responseType) => void): boolean;
	    listen(event: IEvent | string, listener: () => void): IEventer;
	    info<infoType>(event: IEvent | string, listener: (info: infoType) => void): IEventer;
	    ack(event: IEvent | string, listener: (callback: (e: Error) => void) => void): IEventer;
	    answer<answerType>(event: IEvent | string, listener: (callback: (e: Error, answer?: answerType) => void) => void): IEventer;
	    respond<requestType, responseType>(event: IEvent | string, listener: (request: requestType, callback: (e: Error, response?: responseType) => void) => void): IEventer;
	    onlyOnce(): IEventer;
	}
	export = IEventer;

}
declare module 'ironworks/interfaces/eventing/IEventerChild' {
	import IEventer = require('ironworks/interfaces/eventing/IEventer');
	interface IEventerChild extends IEventer {
	    dispose(callback?: () => void): any;
	}
	export = IEventerChild;

}
declare module 'ironworks/interfaces/collection/ICollection' {
	import IWhoQuery = require('ironworks/interfaces/whoIAm/IWhoQuery');
	import IWho = require('ironworks/interfaces/whoIAm/IWho');
	import IEventerChild = require('ironworks/interfaces/eventing/IEventerChild');
	interface ICollection<whoType extends IWho> extends IEventerChild {
	    add(item: whoType): any;
	    addMany(items: whoType[]): any;
	    remove(query: IWhoQuery, callback?: (e: Error, result: whoType[]) => void): any;
	    get(query: IWhoQuery, callback: (e: Error, result: whoType[]) => void): any;
	    clear(): void;
	    list(): whoType[];
	    each(iterator: (item: whoType, itemDone: (e: Error) => void) => void, allDone?: (e: Error) => void): any;
	}
	export = ICollection;

}
declare module 'ironworks/interfaces/workers/IWorkerChild' {
	import IDependency = require('ironworks/interfaces/workers/IDependency');
	import ICollection = require('ironworks/interfaces/collection/ICollection');
	import IWorker = require('ironworks/interfaces/workers/IWorker');
	interface IWorkerChild extends IWorker {
	    init(callback?: (e: Error) => void): any;
	    start(dependencies: ICollection<IDependency<IWorkerChild>>, callback?: (e: Error) => void): any;
	}
	export = IWorkerChild;

}
declare module 'ironworks/interfaces/workers/IDependency' {
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	import IWho = require('ironworks/interfaces/whoIAm/IWho');
	interface IDependency<T extends IWorkerChild> extends IWho {
	    value?: T;
	}
	export = IDependency;

}
declare module 'ironworks/interfaces/workers/IWorker' {
	import IWho = require('ironworks/interfaces/whoIAm/IWho');
	import IComm = require('ironworks/interfaces/eventing/IComm');
	import IEventerChild = require('ironworks/interfaces/eventing/IEventerChild');
	interface IWorker extends IWho, IEventerChild {
	    running: boolean;
	    getDependencyNames(): string[];
	    getComm(): IComm;
	}
	export = IWorker;

}
declare module 'ironworks/interfaces/eventing/IComm' {
	import IWorker = require('ironworks/interfaces/workers/IWorker');
	interface IComm extends IWorker {
	    prefix(): string;
	    start(callback?: (e: Error) => void): any;
	}
	export = IComm;

}
declare module 'ironworks/interfaces/eventing/ICommEvent' {
	import IEvent = require('ironworks/interfaces/eventing/IEvent');
	interface ICommEvent extends IEvent {
	    prefix?: string;
	    service?: string;
	    method?: string;
	    worker?: string;
	}
	export = ICommEvent;

}
declare module 'ironworks/interfaces/eventing/ICommEmit' {
	import IEmit = require('ironworks/interfaces/eventing/IEmit');
	import ICommEvent = require('ironworks/interfaces/eventing/ICommEvent');
	interface ICommEmit extends IEmit, ICommEvent {
	}
	export = ICommEmit;

}
declare module 'ironworks/interfaces/opts/IEventerOpts' {
	interface IEventerOpts {
	    eventEmitter2Config?: {
	        wildcard?: boolean;
	        delimiter?: string;
	        newListener?: boolean;
	        maxListeners?: number;
	    };
	}
	export = IEventerOpts;

}
declare module 'ironworks/interfaces/opts/ICollectionOpts' {
	import IEventerOpts = require('ironworks/interfaces/opts/IEventerOpts');
	export = IEventerOpts;

}
declare module 'ironworks/interfaces/opts/IWorkerOpts' {
	interface IWorkerOpts {
	}
	export = IWorkerOpts;

}
declare module 'ironworks/interfaces/opts/ICommOpts' {
	import IWorkerOpts = require('ironworks/interfaces/opts/IWorkerOpts');
	interface ICommOpts {
	    prefix?: string;
	    worker?: IWorkerOpts;
	}
	export = ICommOpts;

}
declare module 'ironworks/interfaces/opts/IHttpWorkerOpts' {
	import hapi = require('hapi');
	interface IHttpWorkerOpts {
	    port?: number;
	    apiUri?: string;
	    serveFilesRoot?: string;
	    hapi?: hapi.IServerOptions;
	}
	export = IHttpWorkerOpts;

}
declare module 'ironworks/interfaces/opts/IServiceOpts' {
	import IWorkerOpts = require('ironworks/interfaces/opts/IWorkerOpts');
	import ICommOpts = require('ironworks/interfaces/opts/ICommOpts');
	interface IServiceOpts {
	    dependencyCheckTimeout?: number;
	    dependencyCheckFrequency?: number;
	    service?: IWorkerOpts;
	    comm?: ICommOpts;
	}
	export = IServiceOpts;

}
declare module 'ironworks/interfaces/opts/ISocketWorkerOpts' {
	interface ISocketWorkerOpts {
	    externalServiceUrlEnvVarPrefix?: string;
	    socketio?: any;
	}
	export = ISocketWorkerOpts;

}
declare module 'ironworks/interfaces/service/IService' {
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	import IWhoQuery = require('ironworks/interfaces/whoIAm/IWhoQuery');
	import IWorker = require('ironworks/interfaces/workers/IWorker');
	interface IService extends IWorker {
	    use(worker: IWorkerChild): IService;
	    inject(injector: (service: IService, use: (worker: IWorkerChild) => void) => void): IService;
	    disposeWorkers(callback: () => void): any;
	    start(callback?: (e: Error) => void): any;
	    get(workerQuery: IWhoQuery, callback: (e: Error, results: IWorkerChild[]) => void): IService;
	}
	export = IService;

}
declare module 'ironworks/interfaces/service/IServiceReady' {
	import IService = require('ironworks/interfaces/service/IService');
	interface IServiceReady {
	    service: IService;
	}
	export = IServiceReady;

}
declare module 'ironworks/interfaces/workers/IHttpWorker' {
	import hapi = require('hapi');
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	interface IHttpWorker extends IWorkerChild {
	    httpServer: hapi.Server;
	}
	export = IHttpWorker;

}
declare module 'ironworks/interfaces/workers/ISocketWorker' {
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	interface ISocketWorker extends IWorkerChild {
	}
	export = ISocketWorker;

}

declare module 'ironworks/src/opts/Options' {
	 class Options<I> {
	    private defaults;
	    private options;
	    constructor(defaults: I);
	    get<getI>(dotDelimitedKey: string, root?: any): getI;
	    has(dotDelimitedKey: string): boolean;
	    beAdoptedBy<parentI>(parentDefs: I, childName: string): Options<I>;
	    merge(newOpts: I): void;
	    private static recursiveMerge(newOpts, currentOpts, currentDefs);
	}
	export = Options;

}
declare module 'ironworks/src/helpers/idHelper' {
	export function newId(): string;

}
declare module 'ironworks/src/eventing/Eventer' {
	import events = require('eventemitter2');
	import IEvent = require('ironworks/interfaces/eventing/IEvent');
	import IEmit = require('ironworks/interfaces/eventing/IEmit');
	import Options = require('ironworks/src/opts/Options');
	import IEventer = require('ironworks/interfaces/eventing/IEventer');
	import IEventerOpts = require('ironworks/interfaces/opts/IEventerOpts'); class Eventer extends events.EventEmitter2 implements IEventer {
	    private useOnce;
	    protected event: string;
	    protected opts: Options<IEventerOpts>;
	    constructor(opts?: IEventerOpts);
	    private static getEvent(event);
	    tell(event: IEmit | string): boolean;
	    inform<infoType>(event: IEmit | string, info: infoType): boolean;
	    confirm(event: IEmit | string, callback: (e: Error) => void): boolean;
	    ask<answerType>(event: IEmit | string, callback: (e: Error, answer?: answerType) => void): boolean;
	    request<requestType, responseType>(event: IEmit | string, request: requestType, callback: (e: Error, response?: responseType) => void): boolean;
	    listen(event: IEvent | string, listener: () => void): IEventer;
	    info<infoType>(event: IEvent | string, listener: (info: infoType) => void): IEventer;
	    ack(event: IEvent | string, listener: (callback: (e: Error) => void) => void): IEventer;
	    answer<answerType>(event: IEvent | string, listener: (callback: (e: Error, answer?: answerType) => void) => void): IEventer;
	    respond<requestType, responseType>(event: IEvent | string, listener: (request: requestType, callback: (e: Error, response?: responseType) => void) => void): IEventer;
	    onlyOnce(): IEventer;
	    private setupListener(event, listener);
	    private getListenMethod();
	    protected dispose(callback?: () => void): void;
	}
	export = Eventer;

}
declare module 'ironworks/src/collection/Collection' {
	import IWhoQuery = require('ironworks/interfaces/whoIAm/IWhoQuery');
	import IWho = require('ironworks/interfaces/whoIAm/IWho');
	import Eventer = require('ironworks/src/eventing/Eventer');
	import ICollection = require('ironworks/interfaces/collection/ICollection');
	import ICollectionOpts = require('ironworks/interfaces/opts/ICollectionOpts'); class Collection<whoType extends IWho> extends Eventer implements ICollection<whoType> {
	    private collection;
	    constructor(id: string, opts?: ICollectionOpts);
	    add(item: whoType): void;
	    addMany(items: whoType[]): void;
	    remove(query: IWhoQuery, callback?: (e: Error, removed: whoType[]) => void): void;
	    get(query: IWhoQuery, callback: (e: Error, result: whoType[]) => void): void;
	    list(): whoType[];
	    clear(): void;
	    each(iterator: (item: whoType, itemDone: (e: Error) => void) => void, allDone?: (e: Error) => void): void;
	    dispose(callback?: () => void): void;
	}
	export = Collection;

}
declare module 'ironworks/src/eventing/Comm' {
	import IAm = require('ironworks/interfaces/whoIAm/IAm');
	import ICommEvent = require('ironworks/interfaces/eventing/ICommEvent');
	import ICommEmit = require('ironworks/interfaces/eventing/ICommEmit');
	import Eventer = require('ironworks/src/eventing/Eventer');
	import IComm = require('ironworks/interfaces/eventing/IComm');
	import ICommOpts = require('ironworks/interfaces/opts/ICommOpts'); class Comm extends Eventer implements IComm {
	    private me;
	    running: boolean;
	    constructor(whoAmI: IAm, opts?: ICommOpts);
	    init(callback: (e: Error) => void): void;
	    start(callback?: (e: Error) => void): void;
	    prefix(): string;
	    who(callback?: (e: Error, me: IAm) => void): IAm;
	    getDependencyNames(): string[];
	    getComm(): IComm;
	    static getEventText(event: ICommEvent | string): string;
	    tell(event: ICommEmit | string): boolean;
	    inform<infoType>(event: ICommEmit | string, info: infoType): boolean;
	    confirm(event: ICommEmit | string, callback: (e: Error) => void): boolean;
	    ask<answerType>(event: ICommEmit | string, callback: (e: Error, answer?: answerType) => void): boolean;
	    request<requestType, responseType>(event: ICommEmit | string, request: requestType, callback: (e: Error, response?: responseType) => void): boolean;
	    private isWildcard(event, listener);
	    listen(event: ICommEvent | string, listener: () => void): IComm;
	    info<infoType>(event: ICommEvent | string, listener: (info: infoType) => void): IComm;
	    ack(event: ICommEvent | string, listener: (callback: (e: Error) => void) => void): IComm;
	    answer<answerType>(event: ICommEvent | string, listener: (callback: (e: Error, answer?: answerType) => void) => void): IComm;
	    respond<requestType, responseType>(event: ICommEvent | string, listener: (request: requestType, callback: (e: Error, response?: responseType) => void) => void): IComm;
	    onlyOnce(): IComm;
	    dispose(callback?: () => void): void;
	}
	export = Comm;

}
declare module 'ironworks/src/workers/Worker' {
	import IComm = require('ironworks/interfaces/eventing/IComm');
	import Options = require('ironworks/src/opts/Options');
	import IAm = require('ironworks/interfaces/whoIAm/IAm');
	import ICommEmit = require('ironworks/interfaces/eventing/ICommEmit');
	import ICommEvent = require('ironworks/interfaces/eventing/ICommEvent');
	import IDependency = require('ironworks/interfaces/workers/IDependency');
	import ICollection = require('ironworks/interfaces/collection/ICollection');
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	import IWorker = require('ironworks/interfaces/workers/IWorker');
	import IWorkerOpts = require('ironworks/interfaces/opts/IWorkerOpts'); class Worker implements IWorker {
	    protected dependencyNames: string[];
	    protected dependencies: ICollection<IDependency<IWorkerChild>>;
	    protected service: IAm;
	    protected me: IAm;
	    protected useOnce: boolean;
	    protected opts: Options<IWorkerOpts>;
	    protected comm: IComm;
	    running: boolean;
	    constructor(dependencyNames: string[], comm: IComm, service: IAm, whoAmI: IAm, opts?: IWorkerOpts);
	    who(callback?: (e: Error, me: IAm) => void): IAm;
	    getDependencyNames(): string[];
	    getComm(): IComm;
	    protected populateCommEvent(event: ICommEvent | string, method?: string): ICommEvent;
	    protected populateCommEmit(event: ICommEmit | string, method?: string): ICommEmit;
	    tell(event: ICommEmit | string): boolean;
	    inform<infoType>(event: ICommEmit | string, info: infoType): boolean;
	    confirm(event: ICommEmit | string, callback: (e: Error) => void): boolean;
	    ask<answerType>(event: ICommEmit | string, callback: (e: Error, answer?: answerType) => void): boolean;
	    request<requestType, responseType>(event: ICommEmit | string, request: requestType, callback: (e: Error, response?: responseType) => void): boolean;
	    listen(event: ICommEvent | string, listener: () => void): IWorker;
	    info<infoType>(event: ICommEvent | string, listener: (info: infoType) => void): IWorker;
	    ack(event: ICommEvent | string, listener: (callback: (e: Error) => void) => void): IWorker;
	    answer<answerType>(event: ICommEvent | string, listener: (callback: (e: Error, answer?: answerType) => void) => void): IWorker;
	    respond<requestType, responseType>(event: ICommEvent, listener: (request: requestType, callback: (e: Error, response?: responseType) => void) => void): IWorker;
	    private checkOnce();
	    onlyOnce(): IWorker;
	    dispose(callback?: () => void): void;
	}
	export = Worker;

}
declare module 'ironworks/src/service/Service' {
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	import IWhoQuery = require('ironworks/interfaces/whoIAm/IWhoQuery');
	import IAm = require('ironworks/interfaces/whoIAm/IAm');
	import Worker = require('ironworks/src/workers/Worker');
	import IService = require('ironworks/interfaces/service/IService');
	import IServiceOpts = require('ironworks/interfaces/opts/IServiceOpts'); class Service extends Worker implements IService {
	    private workers;
	    constructor(name: string, opts?: IServiceOpts);
	    start(callback?: (e: Error) => void): void;
	    private readyWorker(worker, workerStarted?);
	    who(callback?: (e: Error, me: IAm) => void): IAm;
	    use(worker: IWorkerChild): IService;
	    inject(injector: (service: IService, use: (worker: IWorkerChild) => void) => void): IService;
	    get(workerQuery: IWhoQuery, callback: (e: Error, results: IWorkerChild[]) => void): IService;
	    disposeWorkers(callback: () => void): void;
	    dispose(callback?: () => void): void;
	}
	export = Service;

}
declare module 'ironworks/src/workers/HttpWorker' {
	import hapi = require('hapi');
	import IComm = require('ironworks/interfaces/eventing/IComm');
	import IAm = require('ironworks/interfaces/whoIAm/IAm');
	import IDependency = require('ironworks/interfaces/workers/IDependency');
	import ICollection = require('ironworks/interfaces/collection/ICollection');
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	import Worker = require('ironworks/src/workers/Worker');
	import IHttpWorker = require('ironworks/interfaces/workers/IHttpWorker');
	import IHttpWorkerOpts = require('ironworks/interfaces/opts/IHttpWorkerOpts'); class HttpWorker extends Worker implements IHttpWorker {
	    httpServer: hapi.Server;
	    constructor(comm: IComm, service: IAm, opts?: IHttpWorkerOpts);
	    init(callback?: (e: Error) => void): void;
	    start(dependencies: ICollection<IDependency<IWorkerChild>>, callback?: (e: Error) => void): void;
	    dispose(callback?: () => void): void;
	}
	export = HttpWorker;

}
declare module 'ironworks/src/workers/SocketWorker' {
	import IComm = require('ironworks/interfaces/eventing/IComm');
	import IAm = require('ironworks/interfaces/whoIAm/IAm');
	import IDependency = require('ironworks/interfaces/workers/IDependency');
	import ICollection = require('ironworks/interfaces/collection/ICollection');
	import IWorkerChild = require('ironworks/interfaces/workers/IWorkerChild');
	import Worker = require('ironworks/src/workers/Worker');
	import ISocketWorker = require('ironworks/interfaces/workers/ISocketWorker');
	import ISocketWorkerOpts = require('ironworks/interfaces/opts/ISocketWorkerOpts'); class SocketWorker extends Worker implements ISocketWorker {
	    socketServer: any;
	    constructor(comm: IComm, service: IAm, opts?: ISocketWorkerOpts);
	    init(callback: (e: Error) => void): void;
	    private getExternalServiceUrl(service);
	    start(dependencies: ICollection<IDependency<IWorkerChild>>, callback?: (e: Error) => void): void;
	    dispose(callback?: () => void): void;
	}
	export = SocketWorker;

}
