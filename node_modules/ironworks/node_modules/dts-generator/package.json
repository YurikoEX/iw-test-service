{
  "name": "dts-generator",
  "description": ".d.ts generator. Generates a single d.ts bundle containing external modules from TypeScript files.",
  "version": "1.4.1",
  "bugs": {
    "url": "https://github.com/SitePen/dts-generator/issues"
  },
  "license": "BSD-3-Clause",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SitePen/dts-generator.git"
  },
  "bin": {
    "dts-generator": "bin/dts-generator"
  },
  "dependencies": {
    "bluebird": "2.9.4",
    "glob": "4.3.2",
    "mkdirp": "0.5.0",
    "typescript": "1.5.0-alpha"
  },
  "devDependencies": {
    "tsd": "0.5.7"
  },
  "scripts": {
    "prepublish": "tsc -m commonjs -t es5 typings/tsd.d.ts index.ts bin/dts-generator.ts"
  },
  "readme": ".d.ts generator\n===============\n\nGenerates a single .d.ts bundle containing external module declarations generated from TypeScript files.\n\n## What does this mean?\n\nIf you have a project with lots of individual TypeScript files that are designed to be consumed as external modules,\nthe TypeScript compiler doesn’t allow you to actually create a single bundle out of them. This package leverages the\nTypeScript language services in TypeScript 1.4+ to generate a single .d.ts file containing multiple\n`declare module 'foo'` declarations. This allows you to distribute a single .d.ts file along with your compiled\nJavaScript that users can simply reference from the TypeScript compiler using a `/// <reference path />` comment.\n\n.d.ts generator will also correctly merge non-external-module files, and any already-existing .d.ts files.\n\n## Usage\n\n1. `npm install dts-generator`\n\n2. Generate your d.ts bundle:\n\n   Programmatically:\n\n   ```js\nrequire('dts-generator').generate({\n\tname: 'package-name',\n\tbaseDir: '/path/to/package-directory',\n  files: [ 'a.ts', 'b.ts', ... ]\n\tout: 'package-name.d.ts'\n});\n```\n\n   Command-line:\n\n   ```bash\ndts-generator --name package-name --baseDir /path/to/package-directory --out package-name.d.ts a.ts b.ts ...\n```\n\n   Grunt:\n\n   ```js\nmodule.exports = function (grunt) {\n\tgrunt.loadNpmTasks('dts-generator');\n\tgrunt.initConfig({\n\t\tdtsGenerator: {\n\t\t\toptions: {\n\t\t\t\tname: 'package-name',\n\t\t\t\tbaseDir: '/path/to/package-directory',\n\t\t\t\tout: 'package-name.d.ts'\n\t\t\t},\n\t\t\tdefault: {\n\t\t\t\tsrc: [ '/path/to/package-directory/**/*.ts' ]\n\t\t\t}\n\t\t}\n\t});\n};\n```\n\n3. Reference your generated d.ts bundle from somewhere in your consumer module and import away!:\n\n   ```ts\n/// <reference path=\"typings/package-name.d.ts\" />\n\nimport Foo = require('package-name/Foo');\n\n// ...\n```\n\n## Options\n\n* `baseDir: string`: The base directory for the package being bundled. Any dependencies discovered outside this\n  directory will be excluded from the bundle.\n* `excludes?: string[]`: A list of files, relative to `baseDir`, that should be excluded from the bundle. Use the\n  `--exclude` flag one or more times on the command-line.\n* `externs?: string[]`: A list of external module reference paths that should be inserted as reference comments. Use\n  the `--extern` flag one or more times on the command-line.\n* `files: string[]`: A list of files from the baseDir to bundle.\n* `eol?: string`: The end-of-line character that should be used when outputting code. Defaults to `os.EOL`.\n* `indent?: string`: The character(s) that should be used to indent the declarations in the output. Defaults to `\\t`.\n* `main?: string`: The module ID that should be used as the exported value of the package’s “main” module.\n* `name: string`: The name of the package. Used to determine the correct exported package name for modules.\n* `out: string`: The filename where the generated bundle will be created.\n* `target?: ts.ScriptTarget`: The target environment for generated code. Defaults to `ts.ScriptTarget.Latest`.\n\n## Known issues\n\n* Output bundle code formatting is not perfect yet\n\n## Thanks\n\n@fdecampredon for the idea to dump output from the compiler emitter back into the compiler parser instead of trying to\nfigure out how to influence the code emitter.\n\n## Licensing\n\n© 2015 SitePen, Inc. New BSD License.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/SitePen/dts-generator#readme",
  "_id": "dts-generator@1.4.1",
  "_shasum": "c653ff2aec71591e48551cabdde4d536f1e7e886",
  "_resolved": "https://registry.npmjs.org/dts-generator/-/dts-generator-1.4.1.tgz",
  "_from": "https://registry.npmjs.org/dts-generator/-/dts-generator-1.4.1.tgz"
}
