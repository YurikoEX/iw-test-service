
var _ = require('lodash');
var ioClient = require('socket.io-client');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var Interceptor = require('../../src/eventing/Interceptor');
var Service = require('../../src/service/Service');
var Worker = require('../../src/workers/Worker');
var HttpWorker = require('../../src/workers/HttpWorker');
var SocketWorker = require('../../src/workers/SocketWorker');

describe('Interceptor', function () {
    beforeEach(function (done) {
        if (_.isUndefined(process.env.VCAP_APP_PORT)) {
            process.env.VCAP_APP_PORT = 8081;
        }
        done();
    });

    it("", function (done) {
        service = new Service('service-name', {
            dependencyCheckTimeout: 250,
            dependencyCheckFrequency: 10
        });
        var worker2Name = 'worker-two';
        var worker1 = new Worker([
            worker2Name
        ], service.getComm(), service.who(), {
            id: 'worker-1',
            name: 'worker-one'
        });
        var worker2 = new Worker([], service.getComm(), service.who(), {
            id: 'worker-2',
            name: worker2Name
        });
        worker1.init = function (cb) {
            cb(null);
        };
        worker2.init = function (cb) {
            cb(null);
        };
        worker1.start = function (deps, cb) {
            cb(null);
        };
        worker2.start = function (deps, cb) {
            cb(null);
        };
        service
            .use(worker1)
            .use(worker2)
            .info('ready', function () {
                done();
            })
            .info('error', function (e) {
                throw e;
            });
        service.start();
    });

});
