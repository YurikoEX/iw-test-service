
var _ = require('lodash');
var ioClient = require('socket.io-client');
var io = require('socket.io');
var request = require('request');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var Service = require('../../src/service/Service');
var Comm = require('../../src/eventing/Comm');
var Worker = require('../../src/workers/Worker');
var HttpWorker = require('../../src/workers/HttpWorker');

var SocketWorker = require('../../src/workers/SocketWorker');

describe('SocketWorker', function () {
    var service, extSrvPort;

    beforeEach(function (done) {
        if (_.isUndefined(process.env.VCAP_APP_PORT)) {
            process.env.VCAP_APP_PORT = 8081;
        }
        extSrvPort = 8082;
        if (_.isUndefined(process.env['iw_ext_srv_skt_url_my-external-service'])) {
            process.env['iw_ext_srv_skt_url_my-external-service'] = 'http://localhost:' + extSrvPort;
        }
        done();
    });

    it("should emit events received over the socket on comm", function (done) {
        service = new Service('service-name', {
            dependencyCheckTimeout: 250,
            dependencyCheckFrequency: 10
        })
            .inject(function (service, use) {
                var w = new Worker([
                    'iw-socket'
                ], service.comm, service.who(), {
                    id: 'worker-test-id',
                    name: 'worker-test'
                });
                w.listen('test', function () {
                    service.dispose(function () {
                        done();
                    });
                });
                w.init = function (cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                w.start = function (deps, cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                use(w);
            })
            .inject(function (service, use) {
                use(new SocketWorker(service.comm, service.who()));
            })
            .inject(function (service, use) {
                use(new HttpWorker(service.comm, service.who()));
            })
            .info('error', function (e) {
                throw e;
            })
            .info('ready', function (iw) {
                iw.service.get({
                    names: [ 'iw-http' ]
                }, function (e, results) {
                    ioClient(results.list()[0].httpServer.info.uri).emit('tell.worker-test.test');
                });
            })
            .start();
    });

    it("should listen to comm events intended for another service, then connect to and emit the event to that service",
        function (done) {
            var test = {
                some: 'data'
            };
            var apiUri = 'api/';
            new Service('my-external-service')
                .inject(function (service, use) {
                    use(new HttpWorker(service.comm, service.who(), {
                        port: extSrvPort
                    }));
                })
                .inject(function (service, use) {
                    use(new SocketWorker(service.comm, service.who()));
                })
                .inject(function (service, use) {
                    var w = new Worker([
                        'iw-http'
                    ], service.comm, service.who(), {
                        id: 'echo-worker-id',
                        name: 'echo-worker'
                    });
                    w.respond('echo', function (req, res) {
                        res(null, req);
                    });
                    w.init = function (cb) {
                        if (!_.isUndefined(cb)) {
                            cb();
                        }
                    };
                    w.start = function (deps, cb) {
                        if (!_.isUndefined(cb)) {
                            cb();
                        }
                    };
                    use(w);
                })
                .info('error', function (e) {
                    throw e;
                })
                .info('ready', function (extIw) {
                    service = new Service('service-name', {
                        dependencyCheckTimeout: 250,
                        dependencyCheckFrequency: 10
                    })
                        .inject(function (service, use) {
                            use(new SocketWorker(service.comm, service.who()));
                        })
                        .inject(function (service, use) {
                            use(new HttpWorker(service.comm, service.who(), {
                                apiUri: apiUri
                            }));
                        })
                        .info('error', function (e) {
                            throw e;
                        })
                        .info('ready', function (iw) {
                            iw.service.get({
                                names: [ 'iw-http' ]
                            }, function (e, results) {
                                request({
                                    method: 'post',
                                    body: test,
                                    json: true,
                                    url: results.list()[0].httpServer.info.uri + '/' + apiUri
                                        + 'comm/my-external-service/request/echo-worker/echo'
                                }, function (e, res, body) {
                                    expect(e).to.be.null;
                                    expect(res.statusCode).to.be.equal(200);
                                    expect(body.some).to.be.equal(test.some);
                                    extIw.service.dispose(function () {
                                        iw.service.dispose(function () {
                                            done();
                                        });
                                    });
                                });
                            });
                        })
                        .start();
                })
                .start();
        });
});
